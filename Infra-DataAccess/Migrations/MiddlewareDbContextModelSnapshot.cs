// <auto-generated />
using System;
using Infra_DataAccess.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra_DataAccess.Migrations
{
    [DbContext(typeof(MiddlewareDbContext))]
    partial class MiddlewareDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Adapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("Name", "Code")
                        .IsUnique();

                    b.ToTable("Adapter");
                });

            modelBuilder.Entity("Domain.AdapterMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("AdapterId");

                    b.ToTable("AdapterMethod");
                });

            modelBuilder.Entity("Domain.AdapterParam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UiName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("AdapterId");

                    b.ToTable("AdapterParam");
                });

            modelBuilder.Entity("Domain.Contact", b =>
                {
                    b.Property<Guid>("NMFLoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSubscribed")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("SurveySendOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UniqueIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NMFLoId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("NMFLoId"), false);

                    b.HasIndex("CustomerId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnPremise")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Domain.CustomerAdapter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerAdapterName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("ID");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("AdapterId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAdapter");
                });

            modelBuilder.Entity("Domain.CustomerAdapterParam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerAdapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAdapterId");

                    b.ToTable("CustomerAdapterParam");
                });

            modelBuilder.Entity("Domain.AdapterMethod", b =>
                {
                    b.HasOne("Domain.Adapter", null)
                        .WithMany("Methods")
                        .HasForeignKey("AdapterId");
                });

            modelBuilder.Entity("Domain.AdapterParam", b =>
                {
                    b.HasOne("Domain.Adapter", null)
                        .WithMany("Params")
                        .HasForeignKey("AdapterId");
                });

            modelBuilder.Entity("Domain.Contact", b =>
                {
                    b.HasOne("Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.CustomerAdapter", b =>
                {
                    b.HasOne("Domain.Adapter", "Adapter")
                        .WithMany()
                        .HasForeignKey("AdapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Customer", null)
                        .WithMany("CustomerAdapters")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adapter");
                });

            modelBuilder.Entity("Domain.CustomerAdapterParam", b =>
                {
                    b.HasOne("Domain.CustomerAdapter", null)
                        .WithMany("CustomerAdapterParams")
                        .HasForeignKey("CustomerAdapterId");
                });

            modelBuilder.Entity("Domain.Adapter", b =>
                {
                    b.Navigation("Methods");

                    b.Navigation("Params");
                });

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Navigation("CustomerAdapters");
                });

            modelBuilder.Entity("Domain.CustomerAdapter", b =>
                {
                    b.Navigation("CustomerAdapterParams");
                });
#pragma warning restore 612, 618
        }
    }
}
